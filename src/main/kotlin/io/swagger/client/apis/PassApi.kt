/**
* Demo Client for Passmeister Apple Wallet and Google Wallet API
* [www.passmeister.com](https://www.passmeister.com).
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class PassApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
    * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
    * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
    * @param passTypeId your pass type id, for example P963493 (Urban Fitness) 
    * @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
    * @return void
    */
    fun createOrUpdatePass(passTypeId: kotlin.Any, passId: kotlin.Any) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("passTypeId", listOf(passTypeId.toString()))
            if (passId != null) {
                put("passId", listOf(passId.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/pass",
            query = localVariableQuery,
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete pass by pass id.
    * Delete pass by pass id.
    * @param passTypeId your pass type id, for example P963493 (Urban Fitness) 
    * @param passId id of the pass 
    * @return void
    */
    fun deletePass(passTypeId: kotlin.Any, passId: kotlin.Any) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("passTypeId", listOf(passTypeId.toString()))
            put("passId", listOf(passId.toString()))
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/pass",
            query = localVariableQuery,
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get pass information by pass id.
    * Get pass information by pass id.
    * @param passTypeId your pass type id, for example P963493 (Urban Fitness) 
    * @param passId id of the pass 
    * @return void
    */
    fun getPass(passTypeId: kotlin.Any, passId: kotlin.Any) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("passTypeId", listOf(passTypeId.toString()))
            put("passId", listOf(passId.toString()))
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/pass",
            query = localVariableQuery,
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Retrieve the list of active pass ids for a given pass type.
    * Retrieve the list of active pass ids for a given pass type.
    * @param passTypeId your pass type id, for example P963493 (Urban Fitness) 
    * @param page  (optional)
    * @param limit  (optional)
    * @return void
    */
    fun passList(passTypeId: kotlin.Any, page: kotlin.Any, limit: kotlin.Any) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("passTypeId", listOf(passTypeId.toString()))
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (limit != null) {
                put("limit", listOf(limit.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/pass/list",
            query = localVariableQuery,
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Send updates to all active passes for a given pass type.
    * For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
    * @param passTypeId your pass type id, for example P963493 (Urban Fitness) 
    * @return void
    */
    fun passSync(passTypeId: kotlin.Any) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("passTypeId", listOf(passTypeId.toString()))
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/pass/sync",
            query = localVariableQuery,
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
